{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "retaildatafactory1"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ParamterizedPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ParameterizedDataflow",
								"type": "DataFlowReference",
								"datasetParameters": {
									"ParameterizedSink": {
										"DSDatabaseServerNname": "retail3.database.windows.net"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"parameters": {
					"RetailDatabaseServerName": {
						"type": "string",
						"defaultValue": "retail3.database.windows.net"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ParameterizedDataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UserMetaDataPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "UserMetadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "InvoicesDelimitedText",
								"type": "DatasetReference"
							},
							"fieldList": [
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "UserMetadataFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "UserMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@json(string(activity('UserMetadata').output['structure']))",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(item(),'name')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "InvoicesColsForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "UserMetadataFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('UserMetadataFilter').output.Value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "InvoicesColIf",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(toLower(item().name),toLower(pipeline().parameters.MetaDataValue))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "NonInvoicesColVariable",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "NonInvoicesCols",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "InvoiceColVariable",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "InvoicesCols",
													"value": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"parameters": {
					"MetaDataValue": {
						"type": "string",
						"defaultValue": "'Invoice'"
					}
				},
				"variables": {
					"InvoicesCols": {
						"type": "Array"
					},
					"NonInvoicesCols": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InvoicesDelimitedText",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "InvoicesTable",
								"type": "DatasetReference"
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParameterizedTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RetailParameterDBLinkedService",
					"type": "LinkedServiceReference",
					"parameters": {
						"RetailDatabaseServerNm": {
							"value": "@dataset().DSDatabaseServerNname",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"DSDatabaseServerNname": {
						"type": "String",
						"defaultValue": "retail3.database.windows.net"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CountryId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CountryCd",
						"type": "varchar"
					},
					{
						"name": "Country",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "country_ref"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParameterizedDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CountryDelimitedText",
								"type": "DatasetReference"
							},
							"name": "Parameterizedsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParameterizedTable",
								"type": "DatasetReference"
							},
							"name": "ParameterizedSink"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tCountryCd as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Parameterizedsource\nParameterizedsource filter(length(CountryCd) < 4) ~> Filter1\nFilter1 sink(input(\n\t\tCountryId as integer,\n\t\tCountryCd as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCountryCd,\n\t\tCountry\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ParameterizedSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ParameterizedTable')]"
			]
		}
	]
}