{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "retaildatafactory1"
		},
		"Retail3AzureBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Retail3AzureBlobStorage'"
		},
		"Retail3AzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Retail3AzureSqlDatabase'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Retail3AzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Retail3AzureBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Retail3AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('Retail3AzureSqlDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Retail3AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Cust_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Customer_Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Finance"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Retail3AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Retail3AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Cust_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Customer_Name",
						"type": "varchar"
					},
					{
						"name": "Dept_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Salary",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "AvgSalary",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CustomerSalary"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Retail3AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CountryDelimitedText')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Retail3AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Countries.csv",
						"container": "retailblobcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CountryCd",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Retail3AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CountryTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Retail3AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CountryId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CountryCd",
						"type": "varchar"
					},
					{
						"name": "Country",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "country_ref"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Retail3AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerDeptTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Retail3AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Cust_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Customer_Name",
						"type": "varchar"
					},
					{
						"name": "Dept_ID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Retail3AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Retail3AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "InvoiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceNo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockCode",
						"type": "varchar"
					},
					{
						"name": "Description",
						"type": "varchar"
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CountryCd",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "customer_invoices"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Retail3AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DepartmentTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Retail3AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Dept_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Dept_Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Department"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Retail3AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FinanceTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Retail3AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Cust_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Customer_Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Finance"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Retail3AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HRTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Retail3AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Cust_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Customer_Name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "HR"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Retail3AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HighValueInvoicesTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Retail3AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "InvoiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceNo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockCode",
						"type": "varchar"
					},
					{
						"name": "Description",
						"type": "varchar"
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Country",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "high_value_invoices"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Retail3AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoicesDelimitedText')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Retail3AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Invoices.csv",
						"container": "retailblobcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "InvoiceNo",
						"type": "String"
					},
					{
						"name": "StockCode",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "InvoiceDate",
						"type": "String"
					},
					{
						"name": "UnitPrice",
						"type": "String"
					},
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Retail3AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoicesStocktypeTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Retail3AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "InvoiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceNo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockCode",
						"type": "varchar"
					},
					{
						"name": "Description",
						"type": "varchar"
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Country",
						"type": "varchar"
					},
					{
						"name": "stocktype",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stockinvoices"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Retail3AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoicesTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Retail3AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "InvoiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceNo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockCode",
						"type": "varchar"
					},
					{
						"name": "Description",
						"type": "varchar"
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Country",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "invoices"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Retail3AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LowValueInvoiceTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Retail3AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "InvoiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceNo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockCode",
						"type": "varchar"
					},
					{
						"name": "Description",
						"type": "varchar"
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Country",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "low_value_invoices"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Retail3AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CountryDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CountryDelimitedText",
								"type": "DatasetReference"
							},
							"name": "CountrySource"
						},
						{
							"dataset": {
								"referenceName": "CountryTable",
								"type": "DatasetReference"
							},
							"name": "CountryDataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CountryTable",
								"type": "DatasetReference"
							},
							"name": "CountrySink"
						}
					],
					"transformations": [
						{
							"name": "CountryNotExists"
						},
						{
							"name": "CountryCdFilter"
						}
					],
					"script": "source(output(\n\t\tCountryCd as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CountrySource\nsource(output(\n\t\tCountryId as integer,\n\t\tCountryCd as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CountryDataSource\nCountrySource, CountryDataSource exists(CountrySource@CountryCd == CountryDataSource@CountryCd,\n\tnegate:true,\n\tbroadcast: 'auto')~> CountryNotExists\nCountryNotExists filter(length(CountryCd) < 4) ~> CountryCdFilter\nCountryCdFilter sink(input(\n\t\tCountryId as integer,\n\t\tCountryCd as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCountryCd,\n\t\tCountry\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CountrySink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CountryDelimitedText')]",
				"[concat(variables('factoryId'), '/datasets/CountryTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerJoinDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerDeptTable",
								"type": "DatasetReference"
							},
							"name": "CustomerSource"
						},
						{
							"dataset": {
								"referenceName": "DepartmentTable",
								"type": "DatasetReference"
							},
							"name": "DepartmentSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HRTable",
								"type": "DatasetReference"
							},
							"name": "Customersink"
						},
						{
							"dataset": {
								"referenceName": "FinanceTable",
								"type": "DatasetReference"
							},
							"name": "FinanceSink"
						}
					],
					"transformations": [
						{
							"name": "CustomerJoin"
						},
						{
							"name": "ConditionalSplit1"
						}
					],
					"script": "source(output(\n\t\tCust_ID as integer,\n\t\tCustomer_Name as string,\n\t\tDept_ID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CustomerSource\nsource(output(\n\t\tDept_ID as integer,\n\t\tDept_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DepartmentSource\nCustomerSource, DepartmentSource join(CustomerSource@Dept_ID == DepartmentSource@Dept_ID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> CustomerJoin\nCustomerJoin split(Dept_Name == 'HR',\n\tDept_Name=='Finance',\n\tdisjoint: false) ~> ConditionalSplit1@(HRSource, FinanceSource)\nConditionalSplit1@HRSource sink(input(\n\t\tCust_ID as integer,\n\t\tCustomer_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['Delete from HR'],\n\tmapColumn(\n\t\tCust_ID,\n\t\tCustomer_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Customersink\nConditionalSplit1@FinanceSource sink(input(\n\t\tCust_ID as integer,\n\t\tCustomer_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['Delete From Finance'],\n\tmapColumn(\n\t\tCust_ID,\n\t\tCustomer_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FinanceSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomerDeptTable')]",
				"[concat(variables('factoryId'), '/datasets/DepartmentTable')]",
				"[concat(variables('factoryId'), '/datasets/HRTable')]",
				"[concat(variables('factoryId'), '/datasets/FinanceTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerWindowDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerDeptTable",
								"type": "DatasetReference"
							},
							"name": "CustomerSalarysource"
						},
						{
							"dataset": {
								"referenceName": "DepartmentTable",
								"type": "DatasetReference"
							},
							"name": "DepartWindowsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "CustomerSalarySink"
						}
					],
					"transformations": [
						{
							"name": "CustomerWindowJoin"
						},
						{
							"name": "CustomerAvgSalaryWindow"
						}
					],
					"script": "source(output(\n\t\tCust_ID as integer,\n\t\tCustomer_Name as string,\n\t\tDept_ID as integer,\n\t\tSalary as decimal(10,2)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> CustomerSalarysource\nsource(output(\n\t\tDept_ID as integer,\n\t\tDept_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DepartWindowsource\nCustomerSalarysource, DepartWindowsource join(CustomerSalarysource@Dept_ID == DepartWindowsource@Dept_ID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> CustomerWindowJoin\nCustomerWindowJoin window(over(DepartName = Dept_Name),\n\tAvgSalary = avg(Salary)) ~> CustomerAvgSalaryWindow\nCustomerAvgSalaryWindow sink(input(\n\t\tCust_ID as integer,\n\t\tCustomer_Name as string,\n\t\tDept_ID as integer,\n\t\tSalary as decimal(10,2),\n\t\tAvgSalary as decimal(10,2)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCust_ID,\n\t\tCustomer_Name,\n\t\tDept_ID = DepartWindowsource@Dept_ID,\n\t\tSalary,\n\t\tAvgSalary\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CustomerSalarySink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CustomerDeptTable')]",
				"[concat(variables('factoryId'), '/datasets/DepartmentTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InvoicesContiditinalDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "InvoicesDelimitedText",
								"type": "DatasetReference"
							},
							"name": "InvoicesConditionalSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "LowValueInvoiceTable",
								"type": "DatasetReference"
							},
							"name": "LowValueInvoicesSink"
						},
						{
							"dataset": {
								"referenceName": "HighValueInvoicesTable",
								"type": "DatasetReference"
							},
							"name": "HighValueInvoicesSink"
						},
						{
							"dataset": {
								"referenceName": "InvoicesTable",
								"type": "DatasetReference"
							},
							"name": "InvoicesGeneralSink"
						}
					],
					"transformations": [
						{
							"name": "InvoicesConditionalSplit"
						}
					],
					"script": "source(output(\n\t\tInvoiceNo as integer '######',\n\t\tStockCode as string,\n\t\tDescription as string,\n\t\tQuantity as integer '######',\n\t\tInvoiceDate as timestamp 'MM-dd-yyyy HH:mm',\n\t\tUnitPrice as double '######.##',\n\t\tCustomerID as integer '######',\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> InvoicesConditionalSource\nInvoicesConditionalSource split(UnitPrice <= 10,\n\tUnitPrice > 49,\n\tdisjoint: false) ~> InvoicesConditionalSplit@(LowValueInvoices, HighValueInvoices, Invoices)\nInvoicesConditionalSplit@LowValueInvoices sink(input(\n\t\tInvoiceId as integer,\n\t\tInvoiceNo as integer,\n\t\tStockCode as string,\n\t\tDescription as string,\n\t\tQuantity as integer,\n\t\tInvoiceDate as timestamp,\n\t\tUnitPrice as decimal(10,2),\n\t\tCustomerID as integer,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['Delete From low_value_invoices'],\n\tmapColumn(\n\t\tInvoiceNo,\n\t\tStockCode,\n\t\tDescription,\n\t\tQuantity,\n\t\tInvoiceDate,\n\t\tUnitPrice,\n\t\tCustomerID,\n\t\tCountry\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> LowValueInvoicesSink\nInvoicesConditionalSplit@HighValueInvoices sink(input(\n\t\tInvoiceId as integer,\n\t\tInvoiceNo as integer,\n\t\tStockCode as string,\n\t\tDescription as string,\n\t\tQuantity as integer,\n\t\tInvoiceDate as timestamp,\n\t\tUnitPrice as decimal(10,2),\n\t\tCustomerID as integer,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['Delete From high_value_invoices'],\n\tmapColumn(\n\t\tInvoiceNo,\n\t\tStockCode,\n\t\tDescription,\n\t\tQuantity,\n\t\tInvoiceDate,\n\t\tUnitPrice,\n\t\tCustomerID,\n\t\tCountry\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> HighValueInvoicesSink\nInvoicesConditionalSplit@Invoices sink(input(\n\t\tInvoiceId as integer,\n\t\tInvoiceNo as integer,\n\t\tStockCode as string,\n\t\tDescription as string,\n\t\tQuantity as integer,\n\t\tInvoiceDate as timestamp,\n\t\tUnitPrice as decimal(10,2),\n\t\tCustomerID as integer,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tpreSQLs:['Delete From Invoices'],\n\tmapColumn(\n\t\tInvoiceNo,\n\t\tStockCode,\n\t\tDescription,\n\t\tQuantity,\n\t\tInvoiceDate,\n\t\tUnitPrice,\n\t\tCustomerID,\n\t\tCountry\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> InvoicesGeneralSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InvoicesDelimitedText')]",
				"[concat(variables('factoryId'), '/datasets/LowValueInvoiceTable')]",
				"[concat(variables('factoryId'), '/datasets/HighValueInvoicesTable')]",
				"[concat(variables('factoryId'), '/datasets/InvoicesTable')]"
			]
		}
	]
}